{"version":3,"sources":["MediaCard.js","CardsList.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","card","maxWidth","margin","props","classes","react_default","a","createElement","Card_default","className","CardActionArea_default","CardContent_default","Typography_default","style","borderBottom","padding","gutterBottom","variant","align","component","name","height","mass","hair_color","skin_color","birth_year","CardActions_default","Button_default","size","color","CardsList","_ref","cards","Grid_default","container","direction","justify","map","_ref2","src_MediaCard","key","App","state","people","searchField","_this2","this","fetch","then","response","json","data","setState","results","src_CardsList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAyDeA,uBA9CA,CACbC,KAAM,CACJC,SAAU,IACVC,OAAQ,KA2CGH,CAvCG,SAAAI,GAAS,IACfC,EAAYD,EAAZC,QACR,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,UAAWL,EAAQJ,MACvBK,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,KACED,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,MAAO,CAACC,aAAc,mBAAoBC,QAAS,GAAIC,cAAY,EAACC,QAAQ,KAAKC,MAAM,SAASC,UAAU,MACnHhB,EAAMiB,MAETf,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYY,MAAM,UAAlB,WACWf,EAAMkB,QAEjBhB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYY,MAAM,UAAlB,SACSf,EAAMmB,MAEfjB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYY,MAAM,UAAlB,eACef,EAAMoB,YAErBlB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYY,MAAM,UAAlB,eACef,EAAMqB,YAErBnB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYY,MAAM,UAAlB,eACef,EAAMsB,cAIzBpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,KACED,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAQO,MAAO,CAACX,OAAQ,QAAS0B,KAAK,QAAQC,MAAM,WAApD,mCCpBKC,EArBG,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MAEnB,OACI3B,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,CAAM4B,WAAS,EAACC,UAAU,MAAMC,QAAQ,gBACpCJ,EAAMK,IAAI,SAAAC,GAA+D,IAA7DlB,EAA6DkB,EAA7DlB,KAAMC,EAAuDiB,EAAvDjB,OAAQC,EAA+CgB,EAA/ChB,KAAMC,EAAyCe,EAAzCf,WAAYC,EAA6Bc,EAA7Bd,WAAYC,EAAiBa,EAAjBb,WACxD,OAASpB,EAAAC,EAAAC,cAACgC,EAAD,CACPC,IAAKpB,EACLA,KAAMA,EACNC,OAAQA,EACRC,KAAMA,EACNC,WAAYA,EACZC,WAAYA,EACZC,WAAYA,QCgBTgB,6MA5BbC,MAAQ,CACNC,OAAQ,GACRC,YAAa,uFAGK,IAAAC,EAAAC,KAWlBC,MAAM,gCACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIN,EAAKO,SAAS,CAAET,OAAQQ,EAAKE,6CAI7C,OACEhD,EAAAC,EAAAC,cAAC+C,EAAD,CAAWtB,MAAOc,KAAKJ,MAAMC,gBAxBjBY,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.be56bae1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst styles = {\r\n  card: {\r\n    maxWidth: 345,\r\n    margin: 12, \r\n  },\r\n};\r\n\r\nconst MediaCard = props => {\r\n    const { classes } = props;\r\n    return (\r\n      <Card className={classes.card}>\r\n        <CardActionArea>\r\n          <CardContent>\r\n            <Typography style={{borderBottom: '0.5px solid grey', padding: 5}} gutterBottom variant='h5' align='center' component='h5'>\r\n              {props.name}\r\n            </Typography>\r\n            <Typography align='center'>\r\n              Height: {props.height}  \r\n            </Typography>\r\n            <Typography align='center'>\r\n              Mass: {props.mass} \r\n            </Typography>\r\n            <Typography align='center'>\r\n              Hair Color: {props.hair_color}  \r\n            </Typography>\r\n            <Typography align='center'>\r\n              Skin Color: {props.skin_color} \r\n            </Typography>\r\n            <Typography align='center'>\r\n              Birth Year: {props.birth_year} \r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n        <CardActions>\r\n          <Button style={{margin: 'auto'}} size='small' color='primary'>\r\n            Learn More\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n}\r\n\r\nMediaCard.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(MediaCard);\r\n","import React from 'react'\r\nimport MediaCard from './MediaCard'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst CardsList = ({ cards }) => {\r\n  \r\n  return (\r\n      <Grid container direction=\"row\" justify=\"space-evenly\">\r\n        { cards.map(({name, height, mass, hair_color, skin_color, birth_year})  => {\r\n          return ( <MediaCard \r\n            key={name}\r\n            name={name}\r\n            height={height}\r\n            mass={mass} \r\n            hair_color={hair_color}\r\n            skin_color={skin_color}\r\n            birth_year={birth_year}  \r\n            />\r\n           )\r\n         }) \r\n        }\r\n      </Grid>\r\n  )\r\n}\r\n\r\nexport default CardsList\r\n","import React, { Component } from 'react'\nimport CardsList from './CardsList'\n\nclass App extends Component {\n  state = {\n    people: [],\n    searchField: ''\n  }\n\n  componentDidMount() {\n    const urls = [\n      'https://swapi.co/api/people/',\n\t\t\t'https://swapi.co/api/people/?page=2', \n\t\t\t'https://swapi.co/api/people/?page=3',\n\t\t\t'https://swapi.co/api/people/?page=4',\n\t\t\t'https://swapi.co/api/people/?page=5',\n\t\t\t'https://swapi.co/api/ppeople?page=6',\n\t\t\t'https://swapi.co/api/people/?page=7'\n    ]\n\n    fetch('https://swapi.co/api/people/')\n      .then(response => response.json())\n      .then(data => this.setState({ people: data.results }))\n  }\n\n  render() {\n    return (\n      <CardsList cards={this.state.people}/>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}